# Reference:
#   - https://cirrus-ci.org/guide/writing-tasks/
#   - https://cirrus-ci.org/guide/linux/
#   - https://cirrus-ci.org/guide/macOS/
#   - https://cirrus-ci.org/guide/windows/
#   - https://hub.docker.com/_/gcc/
#   - https://hub.docker.com/_/python/

#
# Global defaults.
#
container:
  image: python:3.10

env:
  # Maximum cache period (in weeks) before forcing a new cache upload.
  CACHE_PERIOD: "2"
  # Increment the build number to force new mambaforge cache upload.
  MAMBA_CACHE_BUILD: "0"
  # Increment the build number to force new mint cache upload.
  MINT_CACHE_BUILD: "0"
  # Base environment conda packages to be installed
  MAMBA_CACHE_PACKAGES: "pip conda-lock"

#
# Testing (Linux)
#
linux_task:
  auto_cancellation: true
  matrix:
    env:
      PY_VER: "3.9"
      VTK_VER: "9.2"
    env:
      PY_VER: "3.10"
      VTK_VER: "9.2"
  name: "Linux: py${PY_VER}"
  container:
    dockerfile: requirements/ci/linux/Dockerfile
  env:
    ENV_DIR: ${HOME}/mambaforge/envs/py${PY_VER}
    PATH: ${HOME}/mambaforge/bin:${PATH}
  mamba_cache:
    folder: ${HOME}/mambaforge
    fingerprint_script:
      - wget --quiet https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh -O mambaforge.sh
      - echo "${CIRRUS_OS} $(sha256sum mambaforge.sh)"
      - echo "${MAMBA_CACHE_PACKAGES}"
      - echo "$(date +%Y).$(expr $(date +%U) / ${CACHE_PERIOD}):${MAMBA_CACHE_BUILD}"
    populate_script:
      - bash mambaforge.sh -b -p ${HOME}/mambaforge
      - conda config --set always_yes yes --set changeps1 no
      - conda config --set show_channel_urls True
      - conda config --add channels conda-forge
      - conda install --quiet --name base ${MAMBA_CACHE_PACKAGES}
  check_script:
    - conda info --all
    - conda list --name base
  mint_cache:
    folder: ${HOME}/mambaforge/envs/py${PY_VER}
    fingerprint_script:
      - echo "${CIRRUS_OS} py${PY_VER} tests"
      - echo "$(date +%Y).$(expr $(date +%U) / ${CACHE_PERIOD}):${MINT_CACHE_BUILD}"
      - cat ${CIRRUS_WORKING_DIR}/requirements/py$(echo ${PY_VER} | tr -d ".").yml
    populate_script:
      - mamba create -n py${PY_VER} python=${PY_VER}
      - mamba env update --name py${PY_VER} --file ${CIRRUS_WORKING_DIR}/requirements/py$(echo ${PY_VER} | tr -d ".").yml
  test_script:
    - source $(conda info | grep -i 'base environment' | awk '{print $4;}')/etc/profile.d/conda.sh 
    - conda activate py${PY_VER} >/dev/null 2>&1
    - conda install --yes -c conda-forge netcdf-fortran doxygen 2>&1
    - conda list
    - python setup.py develop
    - pytest
    - mkdir build-cmake
    - cd build-cmake
    - cmake -DBUILD_FORTRAN=ON -DNETCDF_INCLUDE_DIRS="${ENV_DIR}/include" -DNETCDF_LIBRARIES="-L${ENV_DIR}/lib -lnetcdf" -DVTK_INCLUDE_DIR=${ENV_DIR}/include/vtk-${VTK_VER} -DVTK_LIBRARY_DIR=${ENV_DIR}/lib ..
    - make VERBOSE=1
    - ctest


#
# Testing (macOS)
#
osx_task:
  auto_cancellation: true
  matrix:
    env:
      PY_VER: "3.10"
      VTK_VER: "9.2"
  name: "OSX: py${PY_VER}"
  macosx_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    ENV_DIR: ${HOME}/mambaforge/envs/py${PY_VER}
    PATH: ${HOME}/mambaforge/bin:${PATH}
  mamba_cache:
    folder: ${HOME}/mambaforge
    fingerprint_script:
      - wget --quiet https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-MacOSX-x86_64.sh -O mambaforge.sh
      - echo "${CIRRUS_OS} $(shasum -a 256 mambaforge.sh)"
      - echo "${MAMBA_CACHE_PACKAGES}"
      - echo "$(date +%Y).$(expr $(date +%U) / ${CACHE_PERIOD}):${MAMBA_CACHE_BUILD}"
    populate_script:
      - bash mambaforge.sh -b -p ${HOME}/mambaforge
      - conda config --set always_yes yes --set changeps1 no
      - conda config --set show_channel_urls True
      - conda config --add channels conda-forge
      - conda install --quiet --name base ${MAMBA_CACHE_PACKAGES}
  check_script:
    - conda info --all
    - conda list --name base
  mint_cache:
    folder: ${HOME}/mambaforge/envs/py${PY_VER}
    fingerprint_script:
      - echo "${CIRRUS_OS} py${PY_VER} tests"
      - echo "$(date +%Y).$(expr $(date +%U) / ${CACHE_PERIOD}):${MINT_CACHE_BUILD}"
      - cat ${CIRRUS_WORKING_DIR}/requirements/py$(echo ${PY_VER} | tr -d ".").yml
    populate_script:
      - mamba create -n py${PY_VER} python=${PY_VER}
      - mamba env update --name py${PY_VER} --file ${CIRRUS_WORKING_DIR}/requirements/py$(echo ${PY_VER} | tr -d ".").yml
  test_script:
    - source $(conda info | grep -i 'base environment' | awk '{print $4;}')/etc/profile.d/conda.sh 
    - conda activate py${PY_VER}
    - python setup.py develop
    - pytest
    - mkdir build-cmake
    - cd build-cmake
    - cmake -DBUILD_FORTRAN=OFF -DVTK_INCLUDE_DIR=${ENV_DIR}/include/vtk-${VTK_VER} -DVTK_LIBRARY_DIR=${ENV_DIR}/lib ..
    - make
    - ctest

#
# Testing (Windows)
#
win_task:
  auto_cancellation: true
  matrix:
    env:
      PY_VER: "3.10"
      VTK_VER: "9.2"
  name: "Windows: py$PY_VER"
  windows_container:
    image: cirrusci/windowsservercore:cmake
    os_version: 2019
  env:
    # use $VAR not %VAR%
    CONDA_DIR: $USERPROFILE\miniconda3
    CONDA_LIB: $CONDA_DIR\Library
    PATH: $CONDA_DIR;$CONDA_LIB\bin;$CONDA_DIR\Scripts;$CONDA_DIR\condabin;$PATH
    # must set this to its default since it doesn't work in env variables
    # see https://github.com/cirruslabs/cirrus-ci-docs/issues/423
    CIRRUS_WORKING_DIR: C:\Users\ContainerAdministrator\AppData\Local\Temp\cirrus-ci-build
    PYTHON_ARCH: 64
  conda_script:
    - choco install -y miniconda3 --params="'/D:%CONDA_DIR%'"
    - conda update -yn base conda
    - conda install --yes -c conda-forge setuptools
    - conda install --yes python=%PY_VER%
    - conda install --yes pytest tbb cython numpy netcdf4
    - conda install --yes -c conda-forge scitools-iris
    - conda install --yes -c conda-forge libnetcdf
    - conda install --yes -c conda-forge vtk=%VTK_VER%
  install_script:
    - conda list
    - python setup.py develop --no-deps
    - python -c "import mint; print(dir(mint))"
    # - pytest mint\tests
    # - ps: Get-Command python
    # - echo %PATH%
    # - dir C:%CONDA_LIB%\bin\vtkRendering*.dll
    # - python -c "import vtk" fails
  test_script:
    - mkdir build-cmake
    - cd build-cmake
    - call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
    # - where cl
    # - dir "%CONDA_LIB%\lib
    # - dir "%CONDA_LIB%\include\vtk-%VTK_VER%"
    - cmake -G "NMake Makefiles" -DVTK_INCLUDE_DIR="%CONDA_LIB%\include\vtk-%VTK_VER%" -DVTK_LIBRARY_DIR="%CONDA_LIB%\lib" -DNETCDF_INCLUDE_DIRS="%CONDA_LIB%\include" -DNETCDF_LIBRARIES="%CONDA_LIB%\lib\netcdf.lib" ..
    - nmake
    - ctest
    - cd ../
